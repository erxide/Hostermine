# Generated by Django 5.0.3 on 2024-03-08 16:25

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'invalid': "Le nom d'utilisateur ne peut contenir que des lettres minuscules, majuscules et chiffres.", 'unique': 'Un utilisateur avec ce nom existe déjà.'}, max_length=30, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_username', message="Le nom d'utilisateur ne peut contenir que des lettres minuscules, majuscules et chiffres.", regex='^[a-zA-Z0-9]+$')])),
                ('password', models.CharField(error_messages={'invalid_password_min_length': 'Le mot de passe doit contenir au moins 8 caractères.', 'invalid_password_special_char': 'Le mot de passe doit contenir au moins un caractère spécial parmi: ! @ # $ % ^ & * ( ) _ + { } | : " < > ? '}, max_length=50, validators=[django.core.validators.MinLengthValidator(8, message='Le mot de passe doit contenir au moins 8 caractères.'), django.core.validators.RegexValidator(message='Le mot de passe doit contenir au moins un caractère spécial parmi: ! @ # $ % ^ & * ( ) _ + { } | : " < > ? ', regex='^(?=.*[!@#$%^&*()_+{}|:"<>?])')])),
                ('mail', models.EmailField(error_messages={'unique': 'Un utilisateur avec cette adresse mail existe déjà.'}, max_length=50, unique=True)),
                ('have_server', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(related_name='users_groups', to='auth.group')),
                ('server_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_servers', to='webserver.server')),
                ('user_permissions', models.ManyToManyField(related_name='users_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'users',
                'ordering': ['username'],
                'indexes': [models.Index(fields=['username', 'mail'], name='users_usernam_38a5f5_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='users',
            constraint=models.UniqueConstraint(fields=('username', 'mail'), name='unique_user'),
        ),
    ]
